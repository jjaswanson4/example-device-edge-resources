---

- name: load a containerized workload onto a device
  hosts:
    - all
  pre_tasks:
    - name: ensure podman is logged in to registry
      containers.podman.podman_login:
        registry: "{{ edge_workload.image_registry.address }}"
        username: "{{ edge_workload.image_registry.username }}"
        password: "{{ edge_workload.image_registry.password }}"
        tlsverify: "{{ edge_workload.image_registry.verify_ssl | default(omit) }}"
      when:
        - edge_workload.image_registry.username is defined
        - edge_workload.image_registry.password is defined

    - name: enable lingering for user
      ansible.builtin.shell:
        cmd: "loginctl enable-linger {{ edge_workload.user }}"
  
  tasks:
    - name: pull edge workload container images to device
      containers.podman.podman_image:
        name: "{{ container.image }}:{{ container.tag }}"
        validate_certs: "{{ edge_workload.image_registry.verify_ssl | default(omit) }}"
        username: "{{ edge_workload.image_registry.username | default(omit) }}"
        password: "{{ edge_workload.image_registry.password | default(omit) }}"
      loop_control:
        loop_var: container
      loop: edge_workload.containers

    - name: create pod for containers
      containers.podman.podman_pod:
        name: "{{ edge_workload.pod.name }}"
        ports: "{{ edge_workload.pod.ports | default(omit) }}"
    
    - name: deploy containers
      containers.podman.podman_container:
        name: "{{ container.name }}"
        image: "{{ container.image }}:{{ container.tag }}"
        pod: "{{ edge_workload_info.pod.name }}"
        state: present
      loop_control:
        loop_var: container
      loop: "{{ edge_workload.containers }}"

    - name: create pod for containers
      containers.podman.podman_pod:
        name: "{{ edge_workload_info.pod.name }}"
        ports: "{{ edge_workload_info.pod.ports }}"
        generate_systemd:
          path: /tmp

    - name: gather up service files
      ansible.builtin.find:
        paths: /tmp
        patterns: '*service'
      register: service_files

    - name: copy generated systemd file to systemd dir
      ansible.builtin.copy:
        src: "{{ file.path }}"
        dest: /etc/systemd/user/
        remote_src: yes
      loop_control:
        loop_var: file
      loop: "{{ service_files.files }}"
      become: true
      register: systemd_files_updated

    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes
        scope: user
      when:
        - systemd_files_updated.changed

    - name: ensure services are enabled
      ansible.builtin.systemd:
        name: "{{ file.path.split('/')[-1] }}"
        scope: user
        enabled: yes
      loop_control:
        loop_var: file
      loop: "{{ service_files.files }}"

  post_tasks:
    - name: ensure ports for pod are allowed through the firewall
      ansible.posix.firewalld:
        port: "{{ port.split(':')[0] }}/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      loop_control:
        loop_var: port
      loop: "{{ edge_workload.pod.ports }}"
      become: true

    - name: start the pod
      ansible.builtin.systemd:
        name: pod-{{ edge_workload.pod.name }}
        state: started
        scope: user